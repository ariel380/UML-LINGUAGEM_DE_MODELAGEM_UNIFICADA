Eles descrevem como o sistema se comporta com o tempo, ou seja, mostram os processos, interaÃ§Ãµes, mudanÃ§as de estado e fluxos de atividades entre os elementos do sistema. SÃ£o essenciais para modelar:


1. Diagrama de Casos de Uso (Use Case Diagram)
Mostra funcionalidades do sistema sob a perspectiva do usuÃ¡rio (ou ator).

Foca no "o que o sistema faz", nÃ£o em como.

Cada "caso de uso" Ã© uma aÃ§Ã£o ou funÃ§Ã£o que o sistema oferece.

ğŸ“Œ Elementos principais:

Ator: Pessoa ou sistema externo que interage com o sistema.

Caso de uso: A funcionalidade oferecida.

AssociaÃ§Ãµes: ConexÃµes entre atores e casos de uso.

Include / Extend: RelaÃ§Ãµes entre casos.

ğŸ“· Exemplo:

yaml
Copiar
Editar
Ator: Cliente
Casos de uso: Fazer Login, Ver Produtos, Comprar Produto

--------------------------------------------------------------------------------------------------------

2. Diagrama de Atividades (Activity Diagram)
Representa o fluxo de atividades ou processos.

Ãštil para modelar regras de negÃ³cio, algoritmos ou workflows.

ğŸ“Œ Elementos principais:

InÃ­cio e fim do fluxo

AÃ§Ãµes/atividades

DecisÃµes (condicionais)

Fluxos de controle

Fork/Join (para processos paralelos)

ğŸ“· Exemplo:

css
Copiar
Editar
[InÃ­cio] â†’ [Validar Dados] â†’ [DecisÃ£o: Dados vÃ¡lidos?]
      â†˜ NÃ£o  â†’ [Exibir Erro]
      â†˜ Sim  â†’ [Processar Pedido] â†’ [Fim]

--------------------------------------------------------------------------------------------------------

3. Diagrama de SequÃªncia (Sequence Diagram)
Mostra a ordem das interaÃ§Ãµes entre objetos ao longo do tempo.

Ideal para representar cenÃ¡rios de uso especÃ­ficos.

ğŸ“Œ Elementos principais:

Objetos (ou participantes)

Linha de vida (linha vertical)

Mensagens trocadas (horizontal, com ordem)

AtivaÃ§Ã£o (blocos indicando tempo de execuÃ§Ã£o)

ğŸ“· Exemplo:

yaml
Copiar
Editar
Cliente â†’ Sistema: login()
Sistema â†’ Banco: autenticar()
Banco â†’ Sistema: sucesso
Sistema â†’ Cliente: exibirHome()

--------------------------------------------------------------------------------------------------------

4. Diagrama de ComunicaÃ§Ã£o (Collaboration Diagram)
Similar ao de sequÃªncia, mas foca mais na estrutura da comunicaÃ§Ã£o entre objetos do que na ordem temporal.

Mostra os objetos e mensagens trocadas, com nÃºmeros indicando sequÃªncia.

--------------------------------------------------------------------------------------------------------

5. Diagrama de Estados (State Machine Diagram)
Representa os estados possÃ­veis de um objeto e as transiÃ§Ãµes entre eles com base em eventos.

Muito usado para objetos que mudam de estado com o tempo (como uma mÃ¡quina de vendas, um pedido, etc).

ğŸ“Œ Elementos principais:

Estados

TransiÃ§Ãµes

Eventos que causam as transiÃ§Ãµes

AÃ§Ãµes durante transiÃ§Ãµes

ğŸ“· Exemplo:
Pedido:

scss
Copiar
Editar
[Solicitado] â†’ (pagar) â†’ [Pago] â†’ (enviar) â†’ [Enviado] â†’ (receber) â†’ [ConcluÃ­do]

--------------------------------------------------------------------------------------------------------

6. Diagrama de InteraÃ§Ã£o Geral (Interaction Overview)
Combina elementos de diagrama de atividades com diagrama de sequÃªncia, oferecendo uma visÃ£o geral de interaÃ§Ãµes.

--------------------------------------------------------------------------------------------------------

7. Diagrama de Tempo (Timing Diagram)
Mostra o comportamento de objetos ao longo de uma linha temporal contÃ­nua.

Ãštil para sistemas embarcados e de tempo real.